package org.scalactic.anyvals

import org.scalatest._
import org.scalatest.prop.GeneratorDrivenPropertyChecks

class $typeName$GeneratedSpec extends FunSpec with Matchers with OptionValues with GeneratorDrivenPropertyChecks with $typeName$SpecSupport {

  describe("$typeName$") {

    it("should be automatically widened to compatible AnyVal targets") {
      $autoWidenTests$
    }

    it("when a compatible AnyVal is passed to a + method invoked on it should give the same AnyVal type back at compile time, and correct value at runtime") {
      $additionTests$
    }

    it("when a compatible AnyVal is passed to a - method invoked on it should give the same AnyVal type back at compile time, and correct value at runtime") {
      $minusTests$
    }

    it("when a compatible AnyVal is passed to a * method invoked on it should give the same AnyVal type back at compile time, and correct value at runtime") {
      $multiplyTests$
    }

    it("when a compatible AnyVal is passed to a / method invoked on it should give the same AnyVal type back at compile time, and correct value at runtime") {
      $divideTests$
    }

    it("when a compatible AnyVal is passed to a % method invoked on it should give the same AnyVal type back at compile time, and correct value at runtime") {
      $modulusTests$
    }

    it("should have a pretty toString") {
      $typeName$.from($formattedValidValue$).value.toString shouldBe "$typeName$($validValue$)"
    }

    it("should return the same type from its unary_+ method") {
      +$typeName$($formattedValidValue$) shouldEqual $typeName$($formattedValidValue$)
    }

    it("should offer a unary + method that is consistent with $primitiveType$") {
      forAll { (p: $typeName$) =>
        (+p).to$primitiveType$ shouldEqual (+(p.to$primitiveType$))
      }
    }

    it("should offer a unary - method that is consistent with $primitiveType$") {
      forAll { (p: $typeName$) =>
        (-p).to$primitiveType$ shouldEqual (-(p.to$primitiveType$))
      }
    }

  }

}